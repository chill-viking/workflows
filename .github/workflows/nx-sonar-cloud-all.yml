on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Directory of nx workspace'
        type: string
        default: './'
      is-release:
        description: 'Is this a release build?'
        type: boolean
        default: false
      released-paths:
        description: 'Paths to release'
        type: string
        default: '[]'
    secrets:
      sonar-token:
        description: 'Sonar token'
        required: true
      github-token:
        description: 'GitHub token'
        required: true

name: Publish to SonarCloud

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-nx-sonar-cloud-all
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  prepare-matrix:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.resolved-folders.outputs.folders }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - shell: pwsh
        name: Get all folders with sonar-project.properties
        id: get-folders
        run: |
          $files = Get-ChildItem -Recurse -Filter sonar-project.properties -File
          $rawFolders = $files | Select-Object -ExpandProperty Directory
          $workspace = '${{ inputs.working-directory }}'.Replace('./', '')
          $folders = $rawFolders | ForEach-Object { $_.FullName.Replace("${{ github.workspace }}/$workspace", '') }
          $serialized = ConvertTo-Json -InputObject $folders -Compress
          Write-Output "output=${serialized}"
          Write-Output "folders=$serialized" >> $env:GITHUB_OUTPUT

          $csv = $folders -join ","
          Write-Output "csv output=${csv}"
          Write-Output "folders_csv=${csv}" >> $env:GITHUB_OUTPUT

      - shell: pwsh
        name: Prepare Release Folders
        if: ${{ inputs.is-release }}
        id: released-folders
        run: |
          $folders = @('${{ steps.get-folders.outputs.folders }}' | ConvertFrom-Json)
          $releasedPaths = @('${{ inputs.released-paths }}' | ConvertFrom-Json)
          $workingFolderFilter = '${{ inputs.working-directory }}'.Replace('./', '')
          $resolvedFolders = @()
          foreach ($path in $releasedPaths)
          {
              Write-Output "Parsing path: ${path}"
              $parsed = $path -replace "${workingFolderFilter}", ""
              Write-Output "Parsed path: ${parsed}"
              if ($folders -contains $parsed)
              {
                  Write-Output "${parsed} found in ${folders}"
                  $resolvedFolders += $parsed
              }
              else
              {
                  Write-Output "${parsed} not found in ${folders}"
              }
          }

          if ($resolvedFolders.Count -eq 0)
          {
              Write-Output "********************* Warning *********************"
              $serializedReleased = $releasedPaths | ConvertTo-Json
              Write-Output "Received released paths: ${serializedReleased}"
              Write-Output "These folders were adjusted to exclude working directory using [${workingFolderFilter}]"
              $serializedFolders = $folders | ConvertTo-Json
              Write-Output "Folders containing SonarCloud properties: ${serializedFolders}"
              Write-Output "::warning::No folders found to publish to SonarCloud, review logs for more details"
              Write-Output "**************************************************"
              Write-Output "folders=[]" >> $env:GITHUB_OUTPUT
          }

          # not piped because single element arrays are not serialized correctly
          $serialized = ConvertTo-Json -InputObject $resolvedFolders -Compress
          Write-Output "output=${serialized}"
          Write-Output "folders=$serialized" >> $env:GITHUB_OUTPUT

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: ${{ steps.get-folders.outputs.folders_csv }}
          files_separator: ","

      - shell: pwsh
        name: Resolve Folders
        id: resolved-folders
        run: |
          $folders = @('${{ steps.get-folders.outputs.folders }}' | ConvertFrom-Json)
          if ('${{ inputs.is-release }}' -eq 'true')
          {
              $folders = @('${{ steps.released-folders.outputs.folders }}' | ConvertFrom-Json)
          }
          else
          {
            $changed = '${{ steps.changed-files.outputs.all_changed_files }}'
            $newFolders = $folders | Where-Object { $changed -like "*$_*" }
            if ($newFolders.Count -gt 0)
            {
              Write-Output "********************* Information *********************"
              Write-Output "   Changed folders found, publishing to SonarCloud"
              Write-Output "   Folders to be scanned"
              $newFolders | ForEach-Object { Write-Output "   - $_" }
              Write-Output "*******************************************************"
            }
            else
            {
              Write-Output "********************* Information *********************"
              Write-Output "   No changed folders found, skipping SonarCloud"
              Write-Output "*******************************************************"
            }

            $folders = $newFolders
          }

          $serialized = ConvertTo-Json -InputObject $folders -Compress
          Write-Output "output=$serialized"
          Write-Output "folders=$serialized" >> $env:GITHUB_OUTPUT

  main:
    name: publish to sonarcloud
    needs: prepare-matrix
    if: needs.prepare-matrix.outputs.matrix != '[]' && needs.prepare-matrix.outputs.matrix != 'null'
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ inputs.working-directory }}
    strategy:
      matrix:
        folder: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout
        with:
          fetch-depth: 0

      - name: Set Project Path
        id: project-path
        shell: pwsh
        run: |
          $fullPath = '${{ inputs.working-directory }}${{ matrix.folder }}'
          Write-Output "full_path=${fullPath}" >> $env:GITHUB_OUTPUT

      - name: Get Project Name
        id: get-name
        run: |
          $projectName = '${{ matrix.folder }}'.Replace('apps/', '').Replace('libs/', '')
          Write-Output "project=$projectName" >> $env:GITHUB_OUTPUT

      - uses: chill-viking/npm-ci@latest
        name: Install Dependencies
        with:
          working_directory: ${{ inputs.working-directory }}

      - uses: chill-viking/workflows/actions/nx-test@main
        name: Test Project
        with:
          project-name: ${{ steps.get-name.outputs.project }}
          working-directory: ${{ inputs.working-directory }}

      - name: Get Version
        id: get-version
        uses: chill-viking/workflows/actions/get-version@main
        with:
          package-path: ${{ steps.project-path.outputs.full_path }}
          is-release: ${{ inputs.is-release }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: ${{ steps.project-path.outputs.full_path }}
          args: >
            -Dsonar.projectVersion=${{ steps.get-version.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}
